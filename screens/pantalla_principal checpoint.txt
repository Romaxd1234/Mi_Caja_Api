import os
import json
from kivy.uix.screenmanager import Screen
from kivy.uix.label import Label
from kivy.uix.button import Button
from kivy.uix.popup import Popup
from kivy.uix.boxlayout import BoxLayout
from kivy.uix.floatlayout import FloatLayout


class VentanaPrincipal(Screen):
    def __init__(self, **kwargs):
        super(VentanaPrincipal, self).__init__(**kwargs)

        self.origen_login = "patron"  # por defecto
        self.nombre_usuario = ""
        self.usuario_actual = ""  # <- ¡NECESARIO!
        self.inicializado = False  # para evitar múltiples cargas

        self.layout = FloatLayout()
        self.add_widget(self.layout)

    def configurar_sesion(self, origen, nombre):
        self.origen_login = origen
        self.nombre_usuario = nombre

    def on_pre_enter(self):
        if not self.inicializado:
            self.layout.clear_widgets()

            if self.origen_login == "patron":
                self.mostrar_botones_patron()
            else:
                self.mostrar_botones_empleado()
            self.inicializado = True

    def mostrar_botones_patron(self):
        label = Label(text="Bienvenido, Patrón", size_hint=(.3, .1), pos_hint={"center_x": .5, "center_y": .8})
        self.layout.add_widget(label)

        btn_empleados = Button(text="Empleados", size_hint=(.3, .1), pos_hint={"center_x": .5, "center_y": .6})
        btn_empleados.bind(on_release=lambda x: self.manager.current = "empleados")
        self.layout.add_widget(btn_empleados)

        btn_prestamo = Button(text="Préstamos", size_hint=(.3, .1), pos_hint={"center_x": .5, "center_y": .45})
        btn_prestamo.bind(on_release=self.mostrar_popup_prestamo)
        self.layout.add_widget(btn_prestamo)

        btn_salir = Button(text="Cerrar sesión", size_hint=(.3, .1), pos_hint={"center_x": .5, "center_y": .2})
        btn_salir.bind(on_release=self.cerrar_sesion)
        self.layout.add_widget(btn_salir)

    def mostrar_botones_empleado(self):
        label = Label(text=f"Bienvenido, {self.nombre_usuario}", size_hint=(.5, .1), pos_hint={"center_x": .5, "center_y": .8})
        self.layout.add_widget(label)

        btn_salir = Button(text="Cerrar sesión", size_hint=(.3, .1), pos_hint={"center_x": .5, "center_y": .2})
        btn_salir.bind(on_release=self.cerrar_sesion)
        self.layout.add_widget(btn_salir)

    def mostrar_popup_prestamo(self, instance):
        contenido = BoxLayout(orientation='vertical', spacing=10, padding=10)

        label = Label(text="Préstamo a empleado")
        contenido.add_widget(label)

        from kivy.uix.textinput import TextInput
        self.campo_cantidad = TextInput(hint_text="Cantidad", multiline=False, input_filter="int", size_hint=(1, None), height=40)
        contenido.add_widget(self.campo_cantidad)

        self.campo_nombre = TextInput(hint_text="Nombre del empleado", multiline=False, size_hint=(1, None), height=40)
        contenido.add_widget(self.campo_nombre)

        btn_hacer_prestamo = Button(text="Hacer préstamo", size_hint=(1, None), height=40)
        btn_hacer_prestamo.bind(on_release=self.guardar_prestamo_pendiente)
        contenido.add_widget(btn_hacer_prestamo)

        self.popup_prestamo = Popup(title="Nuevo préstamo", content=contenido, size_hint=(0.7, 0.5))
        self.popup_prestamo.open()

    def guardar_prestamo_pendiente(self, instance):
        nombre = self.campo_nombre.text.strip()
        cantidad = self.campo_cantidad.text.strip()

        if not nombre or not cantidad:
            return  # Podrías mostrar un mensaje de error aquí si quieres

        mensaje = f"Se te ha realizado un préstamo de ${cantidad}."

        ruta = "data/prestamos_pendientes.json"
        if os.path.exists(ruta):
            with open(ruta, "r", encoding="utf-8") as f:
                prestamos = json.load(f)
        else:
            prestamos = {}

        prestamos[nombre] = {"mensaje": mensaje}

        with open(ruta, "w", encoding="utf-8") as f:
            json.dump(prestamos, f, indent=4)

        self.popup_prestamo.dismiss()

    def cerrar_sesion(self, instance):
        self.manager.current = "login"
        self.inicializado = False
        self.usuario_actual = ""

    def set_usuario(self, nombre):
        self.usuario_actual = nombre
        self.revisar_prestamos_pendientes()

    def revisar_prestamos_pendientes(self):
        ruta_prestamos = "data/prestamos_pendientes.json"
        if not self.usuario_actual or not os.path.exists(ruta_prestamos):
            return

        with open(ruta_prestamos, "r", encoding="utf-8") as f:
            prestamos = json.load(f)

        if self.usuario_actual in prestamos:
            mensaje = prestamos[self.usuario_actual]["mensaje"]
            self.mostrar_alerta_prestamo(mensaje)

    def mostrar_alerta_prestamo(self, mensaje):
        contenido = BoxLayout(orientation='vertical', spacing=10, padding=10)
        contenido.add_widget(Label(text=mensaje))
        btn_aceptar = Button(text="Aceptar", size_hint=(1, None), height=40)
        contenido.add_widget(btn_aceptar)

        popup = Popup(title="Préstamo recibido", content=contenido,
                      size_hint=(0.7, 0.4), auto_dismiss=False)

        def aceptar(_):
            self.eliminar_prestamo_pendiente()
            popup.dismiss()

        btn_aceptar.bind(on_release=aceptar)
        popup.open()

    def eliminar_prestamo_pendiente(self):
        ruta_prestamos = "data/prestamos_pendientes.json"
        if not self.usuario_actual or not os.path.exists(ruta_prestamos):
            return

        with open(ruta_prestamos, "r", encoding="utf-8") as f:
            prestamos = json.load(f)

        if self.usuario_actual in prestamos:
            del prestamos[self.usuario_actual]

            with open(ruta_prestamos, "w", encoding="utf-8") as f:
                json.dump(prestamos, f, indent=4)
